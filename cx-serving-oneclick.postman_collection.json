{
	"info": {
		"_postman_id": "cfa43d17-dd4b-4428-aeaa-021d9919e16c",
		"name": "cx-serving-oneclick",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "ReceiveAnswer",
					"item": [
						{
							"name": "msv",
							"item": [
								{
									"name": "go to requestQuestion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv -> end : msv is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(true);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is second call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->end\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_ids_burned\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"content_ids_burned\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"serving return content_ids [23942, 23949, 23947, 23955, 23965]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [23942, 23949, 23947, 23955, 23965]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": 260899898,\n    \"user_text\": \"webtoken\",\n    \"case_data\": {\n        \"payment_id\": 18660355797, \n        \"chat_id\": \"{{chat_id_random}}\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "go to requestQuestion 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv -> end : ask_by_agent is true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is second call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->end\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_ids_burned\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"content_ids_burned\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"serving return content_ids [23942, 23949, 23947, 23955, 23965]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [23942, 23949, 23947, 23955, 23965]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": 260899898,\n    \"user_text\": \"bom dia\",\n    \"case_data\": {\n        \"payment_id\": 18660355797, \n        \"chat_id\": \"{{chat_id_random}}\"\n    }\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "crypto",
							"item": [
								{
									"name": "go to requestQuestion 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "crypto -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is second call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->end\");",
													"});",
													"",
													"pm.test(\"Models executed [msv, regex]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\"]);",
													"});",
													"",
													"",
													"pm.test(\"serving return content_ids [4242]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [4242]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is regex\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"regex\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_msv_true\", random_chat_id);",
													"console.log(\"chat_id_msv_true first time: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho crypto problemas\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fda_process",
							"item": [
								{
									"name": "go to requestQuestion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_process -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv not is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->end\");",
													"});",
													"",
													"",
													"pm.test(\"Models executed ['msv', 'regex', 'fda_process']\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\"]);",
													"});",
													"",
													"pm.test(\"Fda process is sure, content_id length == 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.equal(1);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"There are faq_ids\", function () {",
													"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_msv_true\", random_chat_id);",
													"console.log(\"chat_id_msv_true first time: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"problema con maquina point\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fda_cdu",
							"item": [
								{
									"name": "go to requestQuestion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_cdu -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is not first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_question->receive_answer->end\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->end\");",
													"});",
													"",
													"",
													"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
													"});",
													"",
													"pm.test(\"Fda process not sure, content_id > 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.gte(1);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"There are faq_ids\", function () {",
													"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_msv_true\", random_chat_id);",
													"console.log(\"chat_id_msv_true first time: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho problemas con meu dinero\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "go to requestQuestion 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"bom dia\",\n        \"case_data\": { \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_cdu -> request_context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is not first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_question->receive_answer->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question->receive_answer->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
													"});",
													"",
													"pm.test(\"Fda process not sure, content_id > 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.gte(1);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"There are faq_ids\", function () {",
													"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ReceiveProblem",
					"item": [
						{
							"name": "fda_cdu",
							"item": [
								{
									"name": "fda_cdu -> request_generic_question_cdu",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_generic_question_cdu\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_generic_question_cdu\");",
													"});",
													"",
													"",
													"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
													"});",
													"",
													"pm.test(\"Fda process not sure, content_id > 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.gte(1);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is generic_question\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"generic_question\");",
													"});",
													"",
													"pm.test(\"serving return content_ids_generic_question\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [28458]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"There are faq_ids\", function () {",
													"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho problemas con meu dinero\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_cdu -> request_context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
													"});",
													"",
													"pm.test(\"Fda process not sure, content_id > 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.gte(1);",
													"});",
													"",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"There are faq_ids\", function () {",
													"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "msv´",
							"item": [
								{
									"name": "msv -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(true);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->end\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"",
													"pm.test(\"serving return content_ids [23942, 23949, 23947, 23955, 23965]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [23942, 23949, 23947, 23955, 23965]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_ids_burned\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"content_ids_burned\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"webtoken\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv-> requestQuestion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_question\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "crypto",
							"item": [
								{
									"name": "crypto -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->end\");",
													"});",
													"",
													"pm.test(\"Models executed [msv, regex]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\"]);",
													"});",
													"",
													"pm.test(\"Conversation path\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->end\");",
													"});",
													"",
													"",
													"pm.test(\"serving return content_ids [4242]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [4242]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is regex\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"regex\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho crypto problemas\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fda_process",
							"item": [
								{
									"name": "fda -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->end\");",
													"});",
													"",
													"pm.test(\"Models executed [msv, regex, fda_process]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\"]);",
													"});",
													"",
													"pm.test(\"faq_ids length > 1\", function () {",
													"    pm.expect(jsonData.faq_cdu_ids.length).be.gte(1)",
													"});",
													"",
													"pm.test(\"Fda process sure, content_id length == 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"problema con maquina point\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ReceiveAnswerGenericQuestionCdu",
					"item": [
						{
							"name": "got to request_generic_question_cdu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Msv is false\", function () {",
											"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
											"});",
											"",
											"pm.test(\"Ask by agent is false\", function () {",
											"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
											"});",
											"",
											"pm.test(\"Msv is first call\", function () {",
											"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
											"    ",
											"});",
											"",
											"pm.test(\"Conversation path receive_problem->request_generic_question_cdu\", function () {",
											"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_generic_question_cdu\");",
											"});",
											"",
											"",
											"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
											"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
											"});",
											"",
											"pm.test(\"Fda process not sure, content_id > 1\", function () {",
											"    pm.expect(jsonData.content_ids.length).to.gte(1);",
											"});",
											"",
											"",
											"pm.test(\"no msv errors\", function () {",
											"    pm.expect(jsonData.features.msv.error).to.eql(null);",
											"});",
											"",
											"pm.test(\"source is generic_question\", function () {",
											"    pm.expect(jsonData.source).to.eql(\"generic_question\");",
											"});",
											"",
											"pm.test(\"There are faq_ids\", function () {",
											"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
											"});",
											"",
											"pm.test(\"No errors Serving\", function () {",
											"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
											"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
											"console.log(\"chat_id_random: \"+random_chat_id)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tiger-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho problemas con meu dinero\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
									"host": [
										"{{url_test_serving}}"
									],
									"path": [
										"cx-mld",
										"oneclick",
										"process"
									],
									"query": [
										{
											"key": "site_id",
											"value": "mlb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fda_process not sure-> end",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Conversation path receive_problem->request_question_cdu->receive_answer_generic_question_cdu->end\", function () {",
											"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_generic_question_cdu->receive_answer_generic_question_cdu->end\");",
											"});",
											"",
											"",
											"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu', 'fda_process']\", function () {",
											"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\", \"fda_process\"]);",
											"});",
											"",
											"pm.test(\"Fda process not sure, content_id > 1\", function () {",
											"    pm.expect(jsonData.content_ids.length).to.gte(1);",
											"});",
											"",
											"",
											"pm.test(\"source is process\", function () {",
											"    pm.expect(jsonData.source).to.eql(\"process\");",
											"});",
											"",
											"pm.test(\"faq_ids == []\", function () {",
											"    pm.expect(jsonData.features.faq_cdu_ids).be.equal(undefined)",
											"});",
											"",
											"pm.test(\"No errors Serving\", function () {",
											"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tiger-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"mais eu no tenho ajuda\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
									"host": [
										"{{url_test_serving}}"
									],
									"path": [
										"cx-mld",
										"oneclick",
										"process"
									],
									"query": [
										{
											"key": "site_id",
											"value": "mlb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "got to request_generic_question_cdu 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Msv is false\", function () {",
											"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
											"});",
											"",
											"pm.test(\"Ask by agent is false\", function () {",
											"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
											"});",
											"",
											"pm.test(\"Msv is first call\", function () {",
											"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
											"    ",
											"});",
											"",
											"pm.test(\"Conversation path receive_problem->request_generic_question_cdu\", function () {",
											"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_generic_question_cdu\");",
											"});",
											"",
											"",
											"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu']\", function () {",
											"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\"]);",
											"});",
											"",
											"pm.test(\"Fda process not sure, content_id > 1\", function () {",
											"    pm.expect(jsonData.content_ids.length).to.gte(1);",
											"});",
											"",
											"",
											"pm.test(\"no msv errors\", function () {",
											"    pm.expect(jsonData.features.msv.error).to.eql(null);",
											"});",
											"",
											"pm.test(\"source is generic_question\", function () {",
											"    pm.expect(jsonData.source).to.eql(\"generic_question\");",
											"});",
											"",
											"pm.test(\"There are faq_ids\", function () {",
											"    pm.expect(jsonData.features.fda_cdu_prediction).not.be.equal(undefined)",
											"});",
											"",
											"pm.test(\"No errors Serving\", function () {",
											"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
											"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
											"console.log(\"chat_id_random: \"+random_chat_id)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tiger-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia, eu tenho problemas con meu dinero\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
									"host": [
										"{{url_test_serving}}"
									],
									"path": [
										"cx-mld",
										"oneclick",
										"process"
									],
									"query": [
										{
											"key": "site_id",
											"value": "mlb"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fda_process sure-> end",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Conversation path receive_problem->request_generic_question_cdu->receive_answer_generic_question_cdu->end\", function () {",
											"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_generic_question_cdu->receive_answer_generic_question_cdu->end\");",
											"});",
											"",
											"",
											"pm.test(\"Models executed ['msv', 'regex', 'fda_process', 'fda_cdu', 'fda_process']\", function () {",
											"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\", \"fda_cdu\", \"fda_process\"]);",
											"});",
											"",
											"pm.test(\"Fda process sure, content_id length == 1\", function () {",
											"    pm.expect(jsonData.content_ids.length).to.equal(1);",
											"});",
											"",
											"",
											"pm.test(\"source is process\", function () {",
											"    pm.expect(jsonData.source).to.eql(\"process\");",
											"});",
											"",
											"pm.test(\"faq_cdu.ids length > 1\", function () {",
											"    pm.expect(jsonData.faq_cdu_ids.length).be.gte(1)",
											"});",
											"",
											"pm.test(\"No errors Serving\", function () {",
											"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tiger-token",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"problema con maquina point\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
									"host": [
										"{{url_test_serving}}"
									],
									"path": [
										"cx-mld",
										"oneclick",
										"process"
									],
									"query": [
										{
											"key": "site_id",
											"value": "mlb"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "without_chat_id",
					"item": [
						{
							"name": "msv",
							"item": [
								{
									"name": "msv ask_for_agent -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"features MSV\", function () {",
													"    pm.expect(jsonData.features.msv).length > 1;",
													"});",
													"",
													"",
													"pm.test(\"source is ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"serving return content_ids\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"Conversation path empty\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": 260899898,\n    \"user_text\": \"bom dia\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv true -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"features MSV\", function () {",
													"    pm.expect(jsonData.features.msv).length > 1;",
													"});",
													"",
													"",
													"pm.test(\"source is content_ids_burned\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"content_ids_burned\");",
													"});",
													"",
													"pm.test(\"serving return content_ids\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"});",
													"",
													"pm.test(\"Conversation path empty\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": 260899898,\n    \"user_text\": \"webtoken\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "crypto",
							"item": [
								{
									"name": "crypto -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"features MSV\", function () {",
													"    pm.expect(jsonData.features.msv).length > 1;",
													"});",
													"",
													"",
													"pm.test(\"source is regex\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"regex\");",
													"});",
													"",
													"pm.test(\"serving return content_ids\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"});",
													"",
													"pm.test(\"Conversation path empty\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": 260899898,\n    \"user_text\": \"bom dia, eu tenho crypto problema\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "process_fda",
							"item": [
								{
									"name": "fda -> end Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(true);",
													"});",
													"",
													"pm.test(\"Models executed [msv, regex, fda_process]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\", \"regex\", \"fda_process\"]);",
													"});",
													"",
													"pm.test(\"faq_ids length > 1\", function () {",
													"    pm.expect(jsonData.faq_cdu_ids.length).be.gte(1)",
													"});",
													"",
													"pm.test(\"Fda process sure, content_id length == 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.equal(1);",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"Conversation path empty\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"\");",
													"});",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"problema con maquina point\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ReceiveContext",
					"item": [
						{
							"name": "msv",
							"item": [
								{
									"name": "go to request_context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv -> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(true);",
													"});",
													"",
													"pm.test(\"Ask by agent is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(false);",
													"});",
													"",
													"pm.test(\"Msv is not first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"    ",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_context->receive_context->end\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context->receive_context->end\");",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"",
													"pm.test(\"serving return content_ids [23942, 23949, 23947, 23955, 23965]\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [23942, 23949, 23947, 23955, 23965]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_ids_burned\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"content_ids_burned\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"webtoken\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "go to request_context 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "msv-> requestQuestion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Msv is false\", function () {",
													"    pm.expect(jsonData.features.msv.is_msv).to.eql(false);",
													"});",
													"",
													"pm.test(\"Conversation path receive_problem->request_context->receive_context->request_question\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context->receive_context->request_question\");",
													"});",
													"",
													"pm.test(\"Ask by agent is true\", function () {",
													"    pm.expect(jsonData.features.msv.is_ask_by_agent).to.eql(true);",
													"});",
													"",
													"pm.test(\"Msv is first call\", function () {",
													"    pm.expect(jsonData.features.msv.first_message).to.eql(false);",
													"});",
													"",
													"pm.test(\"Models executed [MSV]\", function () {",
													"    pm.expect(jsonData.services_called_order_per_chat_id).to.eql([\"msv\"]);",
													"});",
													"",
													"pm.test(\"serving return content_ids_ask_for_agent\", function () {",
													"    pm.expect(jsonData.content_ids[0]);",
													"    content_ids = jsonData.content_ids",
													"    burned_ids = [26745]",
													"    for (i=0; content_ids.length > i; i++){",
													"        pm.expect(content_ids[i]).to.be.equal(burned_ids[i])",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"no msv errors\", function () {",
													"    pm.expect(jsonData.features.msv.error).to.eql(null);",
													"});",
													"",
													"pm.test(\"source is content_id_ask_for_agent\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"ask_for_agent\");",
													"});",
													"",
													"pm.test(\"There is not fda prediction\", function () {",
													"    pm.expect(jsonData.features.fda_prediction).to.be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"bom dia\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fda_process",
							"item": [
								{
									"name": "go to request_context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_process sure-> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context->receive_context->end\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context->receive_context->end\");",
													"});",
													"",
													"",
													"pm.test(\"Fda process sure, content_id length == 1\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.equal(1);",
													"});",
													"",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"faq_cdu.ids length > 1\", function () {",
													"    pm.expect(jsonData.faq_cdu_ids.length).be.gte(1)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"maquina point\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "go to request_context",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context\");",
													"});",
													"",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"random_chat_id = \"00\"+(Math.floor(Math.random() * 100000000000000).toString());",
													"pm.collectionVariables.set(\"chat_id_random\", random_chat_id);",
													"console.log(\"chat_id_random: \"+random_chat_id)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 603320751,\n        \"user_text\": \"Esqueci minha senha\",\n        \"case_data\": {\n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fda_process not sure-> end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"",
													"",
													"pm.test(\"Conversation path receive_problem->request_context->receive_context->end\", function () {",
													"    pm.expect(jsonData.conversation_path).to.eql(\"receive_problem->request_context->receive_context->end\");",
													"});",
													"",
													"",
													"pm.test(\"Fda process not sure, content_id == 1 (the most probable)\", function () {",
													"    pm.expect(jsonData.content_ids.length).to.equal(1);",
													"});",
													"",
													"",
													"pm.test(\"source is process\", function () {",
													"    pm.expect(jsonData.source).to.eql(\"process\");",
													"});",
													"",
													"pm.test(\"faq_ids == []\", function () {",
													"    pm.expect(jsonData.features.faq_cdu_ids).be.equal(undefined)",
													"});",
													"",
													"pm.test(\"No errors Serving\", function () {",
													"    pm.expect(Object.keys(jsonData.errors).length).to.equal(0);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-tiger-token",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"user_id\": 260899898,\n        \"user_text\": \"problema con maquina point\",\n        \"case_data\": {\n            \"payment_id\": 18660355797, \n            \"chat_id\": \"{{chat_id_random}}\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_test_serving}}/cx-mld/oneclick/process?site_id=mlb",
											"host": [
												"{{url_test_serving}}"
											],
											"path": [
												"cx-mld",
												"oneclick",
												"process"
											],
											"query": [
												{
													"key": "site_id",
													"value": "mlb"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "ping",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-tiger-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://test_cx-serving-oneclick-mld.furyapps.io/ping",
					"protocol": "http",
					"host": [
						"test_cx-serving-oneclick-mld",
						"furyapps",
						"io"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "prediction",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-tiger-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": 159924322,\n    \"user_text\": \"aumento do limite\",\n    \"case_data\": {\n            \"payment_id\": 186603557970\n            \n        }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_dev}}/cx-mld/oneclick/process?site_id=mlb",
					"host": [
						"{{url_dev}}"
					],
					"path": [
						"cx-mld",
						"oneclick",
						"process"
					],
					"query": [
						{
							"key": "site_id",
							"value": "mlb"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "refresh config",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url_dev}}/refresh_config",
					"host": [
						"{{url_dev}}"
					],
					"path": [
						"refresh_config"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consumer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\":{\n        \"site\": \"MPM\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_dev}}/cx-mld/oneclick/consumer",
					"host": [
						"{{url_dev}}"
					],
					"path": [
						"cx-mld",
						"oneclick",
						"consumer"
					]
				}
			},
			"response": []
		},
		{
			"name": "chatgpt-serving",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-tiger-token",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://oneclick-mld.melioffice.com/gptmania/chat?text2=bom dia&user_id=260899898",
					"protocol": "https",
					"host": [
						"oneclick-mld",
						"melioffice",
						"com"
					],
					"path": [
						"gptmania",
						"chat"
					],
					"query": [
						{
							"key": "text2",
							"value": "bom dia"
						},
						{
							"key": "text1",
							"value": "bom dia",
							"disabled": true
						},
						{
							"key": "user_id",
							"value": "260899898"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "chat_id_msv_true",
			"value": ""
		},
		{
			"key": "chat_id_ask_by_agent",
			"value": ""
		},
		{
			"key": "chat_id_cdu",
			"value": ""
		},
		{
			"key": "chat_id_random",
			"value": ""
		}
	]
}